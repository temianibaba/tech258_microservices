apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-db
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 256Mi
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  selector:
    app: mongo
  ports:
    - port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: luir/mongo-db
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: storage
              mountPath: /data/db
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: mongo-db
---
 
# Select the type of API version and type of service/object
apiVersion: v1
kind: Service
# Metadata for name
metadata:
  name: mongo-svc
  namespace: default # You can change to the required namespace
# Specification to include ports Selector to connect to the deployment
spec:
  ports:
    - nodePort: 30002 # range is 30000-32768
      port: 27017
      targetPort: 27017
 
  # Let's define the selector and label to connect to nginx deployment
  selector:
    app: mongo # This label connects this service to deployment
 
  # Creating NodePort type of service
  type: NodePort # Also use LoadBalancer - for local use ClusterIP
 
---
 
 
# use spaces not a tab
 
apiVersion: apps/v1 # which api to use for deployment
kind: Deployment # pod - service what kind of service/object you want to create
# what would you like to call it - name the service/object
metadata:
  name: node-deployment # naming the deployment
spec:
  selector:
    matchLabels:
      app: node # look for this label to match with k8 service
      # Lets create replica set of this with instances/pods
  replicas: 3 # 3 pods
    # template to use it's label for K8 service to launch in the browser
  template:
    metadata:
      labels:
        app: node # this label connects to
                   #the service or any other k8 components
  # Let's define the container spec
    spec:
      containers:
      - name: node
        image: luir/nodejs-app:latest # use the image that you built
        ports:
        - containerPort: 3000
        env:
        - name: DB_HOST
          value: mongodb://mongo-svc:27017/posts
       
        imagePullPolicy: Always
       
        resources:
            limits:
              memory: 512Mi
              cpu: "1"
            requests:
              memory: 256Mi
              cpu: "0.2"
 
# create a kubernetes nginx-service.yml to create a k8 servicekube
 
---
 
apiVersion: v1
kind: Service
metadata:
  name: node
spec:
  selector:
    app: node
  ports:
    - port: 3000
      targetPort: 3000
  type: LoadBalancer

